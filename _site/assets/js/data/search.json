[
  
  {
    "title": "Python Tutorial - Chapter 1",
    "url": "/posts/Chapter1/",
    "categories": "Python Tutorials",
    "tags": "python",
    "date": "2024-02-08 13:23:00 +0900",
    





    
    "snippet": "Welcome to Python Tutorial!There are many Human Languages, such as English, Korean, Spanish, Chinese, etc.Just Like humans, computers also have different languages for communication, such as C/C++,...",
    "content": "Welcome to Python Tutorial!There are many Human Languages, such as English, Korean, Spanish, Chinese, etc.Just Like humans, computers also have different languages for communication, such as C/C++, Assembly, Java, JavaScript, and Python.Why Python?Interpreter V.S. CompilerComputers fundamentally only understand languages written with 0 and 1, often referred to as “Machine Language”. No matter what language programmers code in, there must be a process of converting that into machine language. This conversion is done by either an interpreter or a compiler.Two popular examples of these types of languages are C (a compiled language) and Python (an interpreted language). Compiled languages like C usually perform faster, but they can be more difficult to code and debug.Python, on the other hand, is an interpreted language. This means that it is relatively easy to write and fix errors in Python. The interpreter executes the code line by line, which allows for more immediate feedback and easier debugging. This is one of the reasons why Python is popular for beginners and for rapid development.Easy to LearnPython is easy to learn for several reasons.      Readability: Python’s syntax is designed to be readable and straightforward. This makes it easier for beginners to pick up the language and understand what the code is doing.        High-level language: Python is a high-level language, meaning it abstracts many of the complex details of the computer. This allows beginners to start coding without needing to understand complex computer science concepts.        Large Standard Library: Python comes with a large standard library that covers many areas, from web development to machine learning. This means beginners can do a lot with Python without needing to understand or use external libraries.        Strong Community: Python has a large and supportive community. This means there are plenty of resources available for learning and troubleshooting, from online tutorials to forums and Q&amp;A websites.  For example, these are the codes for printing “Hello World!” in three different languages.C++#include &lt;iostream&gt;using namespace std;int main() {    cout &lt;&lt; \"Hello World!\";    return 0;}Javapublic class HelloWorld {    public static void main(String[] args) {        System.out.println(\"Hello World!\");    }}Pythonprint(\"Hello World!\")Wide UsecasesPython has gained its popularity because of its wide range of domains.Python is useful for these tasks:  Web development  Data Science / Data Analysis  Machine Learning  Artificial IntelligencePopular programs developed with Python:  YouTube  Google  Instagram  Spotify  Amazon"
  },
  
  {
    "title": "Recursion",
    "url": "/posts/Recursion/",
    "categories": "Studies, Algorithm",
    "tags": "algorithm",
    "date": "2024-02-08 00:23:00 +0900",
    





    
    "snippet": "Recursion in algorithms is a method where a problem is solved by breaking it down into smaller instances of the same problem. This approach involves a function calling itself with a smaller input u...",
    "content": "Recursion in algorithms is a method where a problem is solved by breaking it down into smaller instances of the same problem. This approach involves a function calling itself with a smaller input until it reaches a condition known as the base case, which is simple enough to be solved directly. Once the base case is reached, the solution to that base case is used to solve the other instances of the problem, building up to the solution of the original problem.  The base case is the condition to stop the recursion  The recursive case is the part where the function calls on itself.print 1 to 10 using recursive functionwithout recursion, the code would look like this:for i in range(11):    print(i)012345678910same task done with recursion:def printNum(n = 1):    if n &gt; 10: #This is a base case        return    else: # This is a recursive case        print(n)        printNum(n + 1)printNum()12345678910Factorialfactorial is a function that multiplies a number by every number below it till 1without recursion:n = 6num = 1for i in range(n):    num *= n    n -= 1print(num)720with recursion:def Factorial(n):    num = 1    if n &lt; 0: # This is a Boundary Case        raise ValueError(\"The input must be a non-negative integer\")    elif n &lt;= 1: # This is a base case        return 1    else: # This is a recursive case        return n * Factorial(n - 1)print(Factorial(6))720FibonacciFibonacci sequence is a sequence in which each number is the sum of the two preceding ones.without recursion:n = 6a_1 = 0a_2 = 1for i in range(n - 1):    a_1, a_2 = a_2, a_1 + a_2print(a_2)8def Fibonacci(n):    if n == 0: # This is a base case        return 0    elif n == 1: # This is another base case        return 1    elif n &gt; 1: # This is a recursive case        return Fibonacci(n - 1) + Fibonacci(n - 2)    else: # This is a boundary case        raise ValueError(\"Negative integer is invalid\")print(Fibonacci(6))“To understand recursion, one must first understand recursion.”-Stephen Hawking-"
  }
  
]

