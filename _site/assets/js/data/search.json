[
  
  {
    "title": "Euler's Formula",
    "url": "/posts/Euler_Eq/",
    "categories": "Mathematics, Calculus",
    "tags": "euler, complex, math, trigonometry, calculus, imaginary number",
    "date": "2024-02-11 18:03:00 +0900",
    





    
    "snippet": "IntroductionIn this post, I will be introducing one of the most famous formulas in mathematics, Euler’s Formula. Euler’s Formula is a mathematical formula that establishes the fundamental relations...",
    "content": "IntroductionIn this post, I will be introducing one of the most famous formulas in mathematics, Euler’s Formula. Euler’s Formula is a mathematical formula that establishes the fundamental relationship between the trigonometric functions and the complex exponential function. It is often cited as an example of deep mathematical beauty.Having completed up to Calculus II is recommended.Prerequsites:  Basic understanding in complex plane  Basic understanding in trigonometric functions  Understanding in Talyer Series Expansion  Understanding in single variable differentiationEuler’s FormulaEuler’s Formula is given by:\\[e^{i\\theta} = \\cos(\\theta) + i\\sin(\\theta)\\]where:  \\(e\\) is the base of the natural logarithm  \\(i\\) is the imaginary unit  \\(\\theta\\) is the angle in radiansThis formula provides a valuable connection between complex numbers and trigonometry. It is often used to simplify trigonometric identities and to solve differential equations.DerivationThe formula can be derived using the Taylor series expansion of the exponential function, sine function, and cosine function.Taylor Series ExpansionAn Euler’s Identity \\(e^{i\\theta} = \\cos(\\theta) + i\\sin(\\theta)\\) can be derived using the Taylor series expansion of the exponential function, sine function, and cosine function.RecallThe Taylor series expansion of a function \\(f(x)\\) about a point \\(a\\) is given by:\\[f(x) = \\sum_{n=0}^{\\infty} \\frac{f^{(n)}(a)}{n!} \\cdot (x - a)^n\\]and      Taylor Series Expansion of the \\(f(x) = e^x\\) is given by: \\(e^x = \\sum_{n=0}^{\\infty} \\frac{x^n}{n!}\\)        Taylor Series Expansion of the \\(f(x) = \\sin(x)\\) is given by: \\(\\sin(x) = \\sum_{n=0}^{\\infty} \\frac{(-1)^n \\cdot x^{2n+1}}{(2n+1)!}\\)        Taylor Series Expansion of the \\(f(x) = \\cos(x)\\) is given by: \\(\\cos(x) = \\sum_{n=0}^{\\infty} \\frac{(-1)^n \\cdot x^{2n}}{(2n)!}\\)  where the radius of convergence of the three functions is \\(R \\in (-\\infty, \\infty)\\).ProofThe Taylor series expansion of the function \\(e^{i\\theta}\\) is given by:\\[\\begin{align*}e^{i\\theta} &amp;= \\sum_{n=0}^{\\infty} \\frac{(i\\theta)^n}{n!} \\\\&amp;= 1 + i\\theta + \\frac{(i\\theta)^2}{2!} + \\frac{(i\\theta)^3}{3!} + \\frac{(i\\theta)^4}{4!} + \\cdots \\\\&amp;= 1 + i\\theta - \\frac{\\theta^2}{2!} - i\\frac{\\theta^3}{3!} + \\frac{\\theta^4}{4!} + i\\frac{\\theta^5}{5!} - \\cdots \\\\&amp;= \\left(1 - \\frac{\\theta^2}{2!} + \\frac{\\theta^4}{4!} - \\cdots\\right) + i\\left(\\theta - \\frac{\\theta^3}{3!} + \\frac{\\theta^5}{5!} - \\cdots\\right) \\\\&amp;= \\cos(\\theta) + i\\sin(\\theta)\\end{align*}\\]&nbsp;$$\\therefore e^{i\\theta} = \\cos(\\theta) + i\\sin(\\theta)$$VerificationWe can verify the formula by simple derivatives.\\(e^{i\\theta} = \\cos(\\theta) + i\\sin(\\theta)\\)&nbsp;Let$$f_1(\\theta) = e^{i\\theta}$$$$f_2(\\theta) = \\cos(\\theta) + i\\sin(\\theta)$$Then$$\\frac{d}{d\\theta} f_1(\\theta) = \\frac{d}{d\\theta} (e^{i\\theta}) = ie^{i\\theta} = if_1(\\theta)$$and$$\\frac{d}{d\\theta} f_2(\\theta) = -\\sin(\\theta) + i\\cos(\\theta) = i[-\\sin(\\theta) + \\cos(\\theta)] = i[\\cos(\\theta) + i\\sin(\\theta)] = if_2(\\theta)$$both functions satisfy the following equation: $$\\frac{d}{dx} f(x) = if(x)$$Differentiate the quotient of \\( f_1(\\theta) \\) and \\( f_2(\\theta) \\):$$\\frac{d}{d\\theta} \\left[ \\frac{f_1(\\theta)}{f_2(\\theta)} \\right] = \\frac{f'_1(\\theta)f_2(\\theta) - f_1(\\theta)f'_2(\\theta)}{[f_2(\\theta)]^2}$$$$= \\frac{i f_1(\\theta) f_2(\\theta) - f_1(\\theta) \\cdot i f_2(\\theta)}{[f_2(\\theta)]^2} = 0$$Since$$\\frac{d}{d\\theta} \\left[ \\frac{f_1(\\theta)}{f_2(\\theta)} \\right] = 0$$a derivative being zero implies that$$\\frac{f_1(\\theta)}{f_2(\\theta)} = c$$for some constant \\( c \\).&nbsp;To find the value of \\( c \\), compute$$\\frac{f_1(\\theta=0)}{f_2(\\theta=0)} = \\frac{e^{i0}}{\\cos(0) + i\\sin(0)} = 1$$$$\\frac{f_1(\\theta)}{f_2(\\theta)} = 1 \\implies f_1(\\theta) = f_2(\\theta)$$$$\\therefore e^{i\\theta} = \\cos(\\theta) + i\\sin(\\theta)$$Euler’s Formula in Complex PlaneRun the following code to visualize Euler’s Formula in the complex plane.import numpy as npimport matplotlib.pyplot as plt# Set up a range of theta valuestheta = np.linspace(0, 2*np.pi, 100)# complex exponentialeuler_formula = np.exp(1j * theta)# Create a plotfig, ax = plt.subplots(figsize=(8, 8))ax.plot(np.cos(theta), np.sin(theta), label='Unit Circle $e^{i\\pi} + 1 = 0$')ax.plot(euler_formula.real, euler_formula.imag, label=\"Euler's Formula $e^{i\\\\theta}$\", color='red')# Plot the axis linesax.axhline(0, color='black',linewidth=2)ax.axvline(0, color='black',linewidth=2)# A line from the origin to the point on the circleax.plot([0, np.cos(np.pi/4)], [0, np.sin(np.pi/4)], color='blue', linewidth=2)ax.annotate(r'$e^{i0} = {\\cos(0) + i\\sin(0)}$', xy=(np.cos(np.pi/4)/2, np.sin(np.pi/4)/2), xytext=(0.72, 0.72), fontsize=12)ax.plot([np.cos(np.pi/4), np.cos(np.pi/4)], [0, np.sin(np.pi/4)], color='green', linestyle='--')# Set the limitsax.set_xlim(-1.5, 1.5)ax.set_ylim(-1.5, 1.5)# Place the axis labels right next to the corresponding axisax.text(1.45, 0.05, '${R}$', ha='right', va='center', fontsize=17)ax.text(0, 1.55, '${i}$', ha='center', va='bottom', fontsize=17)# Show the plot without a gridax.grid(False)plt.show()ApplicationsEuler’s IdentityEuler’s Identity is known as the most beautiful equation in mathematics. It is given by:\\[e^{i\\pi} + 1 = 0\\]We can simply verify the identity by substituting \\(\\pi\\) into the Euler’s Formula:\\[e^{i\\pi} = \\cos(\\pi) + i\\sin(\\pi) = -1 + 0 = -1\\]\\[\\therefore e^{i\\pi} + 1 = 0\\]\\(i\\)th Power of \\(i\\), \\(i^i\\)Although sounds paradoxical, the \\(i\\)th power of \\(i\\) is a real number.The expression \\(i^i\\) might seem bizzare at first, but it can be evaluated using Euler’s Formula.The imaginary unit \\( i \\) can be expressed as$$i = 0 + 1i$$This is equivalent to$$i = \\cos\\left(\\frac{\\pi}{2}\\right) + i\\sin\\left(\\frac{\\pi}{2}\\right)$$Using Euler's formula, we can write$$i = e^{i\\frac{\\pi}{2}}$$$$i^i = \\left(e^{i\\frac{\\pi}{2}}\\right)^i$$$$= e^{i^2\\frac{\\pi}{2}}$$$$= e^{-\\frac{\\pi}{2}}$$$$\\therefore i^i = e^{-\\frac{\\pi}{2}} \\approx 0.2079$$\\(\\sin({z}) = 2\\)For those who are not familiar with complex analysis, the equation \\(\\sin({z}) = 2\\) might seem nonsensical. This is true, since \\(\\forall x \\in \\mathbb{R}, -1 \\leq \\sin(x) \\leq 1\\). However, in complex numbers, the sine function can actually exceed the range of \\(-1 \\leq \\sin(x) \\leq 1\\).For example, the equation \\(\\sin({z}) = 2\\) can be solved using Euler’s Formula.\\[\\sin(z) = 2\\]Using Euler's formulas for sine and cosine$$e^{iz} = \\cos(z) + i\\sin(z)$$$$e^{-iz} = \\cos(-z) + i\\sin(-z) = \\cos(z) - i\\sin(z)$$$$e^{iz} -e^{-iz} = 2i\\sin(z)$$Therefore$$\\sin(z) = \\frac{e^{iz} - e^{-iz}}{2i} = 2$$$$e^{iz} - e^{-iz} = 4i$$Expanding the expression$$(e^{iz} - e^{-iz}) \\cdot e^{iz} = 4ie^{iz}$$Which simplifies to$$(e^{iz})^2 - 1 = 4ie^{iz}$$Letting \\( w = e^{iz} \\), we get a quadratic equation$$w^2 - 4iw - 1 = 0$$Using the quadratic formula where \\( a = 1 \\), \\( b = -4i \\), and \\( c = -1 \\)$$w = \\frac{4i \\pm \\sqrt{(-4i)^2 - 4 \\cdot 1 \\cdot (-1)}}{2 \\cdot 1}$$Solving for \\( w \\), we find$$e^{iz} = w = \\frac{4i \\pm 2i\\sqrt{3}}{2} = i(2 \\pm \\sqrt{3})$$Taking the natural logarithm$$iz = \\ln[i(2 \\pm \\sqrt{3})] = \\ln(i) + \\ln(2 \\pm \\sqrt{3})$$Since \\( \\ln(i) = \\ln(e^{i\\frac{\\pi}{2}}) \\)$$iz = i\\frac{\\pi}{2} + \\ln(2 \\pm \\sqrt{3})$$Solving for \\( z \\)$$z = \\frac{\\pi}{2} + \\frac{1}{i} \\ln(2 \\pm \\sqrt{3})$$Therefore$$z = \\frac{\\pi}{2} - i \\ln(2 \\pm \\sqrt{3})$$The equation \\(\\sin(z) = 2\\) yeilds multiple solutions since the sine function is periodic. However, I will finish by the solution \\(z = \\frac{\\pi}{2} - i \\ln(2 \\pm \\sqrt{3})\\) in this post.Other ApplicationsOther than these examples, Euler’s Formula is widely used in various fields such as physics, engineering, omputer science, and more.For example, Euler’s Formula is used for Fourier Transform for signal processing, and in Schrödinger’s equation in quantum mechanics.ConclusionEuler’s Formula seems to be a simple equation, yet it is certainly one of the most powerful and beautiful equations that forms the foundation of modern science and technology."
  },
  
  {
    "title": "Python Tutorial - Chapter 1",
    "url": "/posts/Chapter1/",
    "categories": "Python Tutorials",
    "tags": "python",
    "date": "2024-02-09 19:15:00 +0900",
    





    
    "snippet": "Welcome back to Python Tutorial!Click to download a Jupyter Notebook for this chapter!Click here to view all tutorial materialsTopics covered in this chapter:  variables  data types and operations ...",
    "content": "Welcome back to Python Tutorial!Click to download a Jupyter Notebook for this chapter!Click here to view all tutorial materialsTopics covered in this chapter:  variables  data types and operations  print() statement  input() statementPython VariablesVariables are containers for storing data values.Python is a dynamically typed language, which means that you don’t have to declare the type of a variable when you create one.Variables are created when you assign a value to it.In an empty code cell, type the following code:x = 5y = \"Hello, World!\"Contratulations! You have created your first Python variable.In a box called x, you have stored the value 5. In another box called y, you have stored the value \"Hello, World!\".Now try to print the value of x and y using the print() statement.x = 5y = \"Hello, World!\"print(x)print(y)5Hello, World!Variables are newly created if you assign a new value to it.For example:x = 5x = 10print(x)The output of the code above will be 10, because the value of x has been updated to 10.Also, x = x + 1 is a valid statement in Python. It means that the value of x will be updated to x + 1.x = 5x = x + 1 # x = 5 + 1print(x)The output of the code above will be 6.x = 5print(x) # 5x = 10print(x) # 10x = x + xprint(x) # 2051020Practice Problem:Using only one variable called ‘var’, write a code that will output the following:110PythonAnswervar = 1print(var)var = 10print(var)var = \"Python\"print(var)Data Types and OperationsData types are the classification or categorization of data items. It represents the kind of value that tells what operations can be performed on a particular data.Python has the following data types built-in by default, in these categories:  Text Type: str (string)  Numeric Types: int (integer), float (floating point number)  Sequence Types: list, tuple, range  Mapping Type: dict (dictionary)  Set Types: set, frozenset  Boolean Type: bool (boolean)In this tutorial, we will cover the following data types:  int (integer)  float (floating point number)  str (string)  bool (boolean)IntegersIntegers are whole numbers, positive or negative, without decimals, of unlimited length.1, 100, -1000, 0 are examples of integers.With integers, you can perform mathematical operations such as addition, subtraction, multiplication, and division.In an empty code cell, type the following code:x = 5y = 10print(x + y) # additionprint(x - y) # subtractionprint(x * y) # multiplicationprint(x / y) # division15-5500.5There are also other operations that you can perform with integers such as floor division, modulus and exponentiation.In an empty code cell, type the following code:x = 5y = 2print(x / y) # plane divisionprint(x % y) # modulusprint(x ** y) # exponentiationprint(x // y) # floor division2.51252FloatsFloats are real numbers, positive or negative, containing one or more decimals.1.5, 123.456, -1000.0, 0.0 are examples of floats.With floats, you can perform the same mathematical operations as integers.You can also mix integers and floats in the same operation.x = 10y = 5.5print(x + y) # additionprint(x - y) # subtractionprint(x * y) # multiplicationprint(x / y) # divisionprint(x // y) # floor divisionprint(x ** y) # exponentiationprint(x % y) # modulus15.54.555.01.81818181818181811.0316227.76601683794.5StringsStrings are sequences of characters, enclosed in single or double quotes.\"Hello, World!\", 'Python', '123' are examples of strings.Note that even though the value '123' looks like a number, it is actually a string because it is enclosed in quotes.You cannot perform mathematical operations with strings, but you can perform string operations such as concatenation and repetition.Therefore, you cannot mix strings with integers or floats in the same operation.In an empty code cell, type the following code:x = \"Hello, \"y = \"World!\"print(x + y) # concatenationprint(x * 3) # repetitionprint(x + 3) # errorHello, World!Hello, Hello, Hello,Quiz: What will be the output of this code?x = 100y = 200print(x + y)x = \"100\"y = \"200\"print(x + y)x = 100y = \"200\"print(x + y)BooleansBooleans represent one of two values: True or False.Booleans are used to evaluate conditions.We will come back to booleans in the future chapter.# Exaple of Booleanprint(10 != 9) # not equalprint(10 == 9) # equalTrueFalseChecking Data TypesYou can check the data type of a variable using the type() function.In an empty code cell, type the following code:num = 5word = \"Hello, World!\"pi = 3.14cond = Trueprint(type(num))print(type(word))print(type(pi))print(type(cond))Conversion between Data TypesYou can convert between data types using the following functions:  int()  float()  str()  bool()x = 5print(type(x)) # intx = float(20)print(x) # 20.0print(type(x)) # floatx = str(3.14)print(x) # '3.14'print(x * 2) # '3.143.14'print(type(x)) # strx = bool(0)y = bool(1)print(x) # Falseprint(y) # True&lt;class 'int'&gt;20.0&lt;class 'float'&gt;3.143.143.14&lt;class 'str'&gt;FalseTrueprint() statementThe print() statement is used to display the output of a code.Normal print() statementIn an empty code cell, type the following code:x = 5print(\"The value of x is\", x)You can also use the + operator to concatenate strings in the print() statement.In an empty code cell, type the following code:x = 5print(\"The value of x is \" + str(x))f-stringYou can also use the f-string to format the output of the print() statement.In an empty code cell, type the following code:x = 5print(f\"The value of x is {x}\")name = \"John\"age = 25print(f\"Hello, my name is {name} and I am {age} years old.\")Escape CharactersYou can use the following escape characters in the print() statement:  \\n - new line  \\t - tab  \\\\ - backslash  \\\" - double quote  \\' - single quoteIn an empty code cell, type the following code:print(\"Hello\\nWorld!\")print(\"Hello\\tWorld!\")print(\"Hello\\\\World!\")print(\"Hello\\\"World!\")print(\"Hello\\'World!\")HelloWorld!Hello\tWorld!Hello\\World!Hello\"World!Hello'World!input() statementThe input() statement is used to get input from the user.In an empty code cell, type the following code:name = input(\"Enter your name: \")print(\"Hello, \" + name)The input() statement will display the message “Enter your name: “ and wait for the user to input a value. The value will be stored in the variable name.By default, the value of input() is a string. If you want to convert it to an integer or a float, you can use the int() or float() function.for example:num1 = input(\"Enter a number: \")num2 = input(\"Enter another number: \")print(num1 + num2)This code will not work as expected because the value of num1 and num2 are strings. You need to convert them to integers or floats.num1 = int(input(\"Enter a number: \"))num2 = int(input(\"Enter another number: \"))print(num1 + num2)Practice ProblemsProblems      Write a simple calculator that receives two numbers from the user and outputs the sum, difference, product, and quotient of the two numbers in a follwoing format:    Enter the first number: 5Enter the second number: 10    The sum of 5 and 10 is 15.    The difference of 5 and 10 is -5.    The product of 5 and 10 is 50.    The quotient of 5 and 10 is 0.5.        Write a code that will receive the radius of a circle from the user and output the area and circumference of the circle in the following format:  Area = πr^2, Circumference = 2πrEnter the radius of the circle: 5The area of the circle is 78.5.The circumference of the circle is 31.4.  Time travel to Thailand?After a long trip, you and your friends finally arrived to Thailand for your summer vacation. At Suvarnabhumi International Airport, you and your friends are surprised that the year is 2567, not 2024.This is because Thailand uses the Buddhist calendar, which is 543 years ahead of the Gregorian calendar.Write a code that will receive the current year from the user and output the year in the Gregorian calendar in the following format:Enter the current year: 2567The current year in the Gregorian calendar is 2024.  Money exchangeAfter arriving to Thailand, you and your friends need to exchange your money to Thai Baht.Your crew discovered a money exchange booth that exchanges 1 US dollar to 35 Thai Baht.The money exchange booth also charges a 5% fee for every transaction.Write a code that will receive the amount of US dollars from the user and output the amount of Thai Baht that you will receive after the transaction in the following format:Enter the amount of US dollars: 100You will receive 3325 Thai Baht after the transaction.Solutions# Problem 1num1 = int(input(\"Enter the first number: \"))num2 = int(input(\"Enter the second number: \"))print(f\"The sum of {num1} and {num2} is {num1 + num2}.\")print(f\"The difference of {num1} and {num2} is {num1 - num2}.\")print(f\"The product of {num1} and {num2} is {num1 * num2}.\")print(f\"The quotient of {num1} and {num2} is {num1 / num2}.\")# Problem 2radius = float(input(\"Enter the radius of the circle: \"))area = 3.14 * radius ** 2circumference = 2 * 3.14 * radiusprint(f\"The area of the circle is {area}.\")print(f\"The circumference of the circle is {circumference}.\")# Problem 3year = int(input(\"Enter the current year: \"))gregorian_year = year - 543print(f\"The current year in the Gregorian calendar is {gregorian_year}.\")# Problem 4us_dollars = float(input(\"Enter the amount of US dollars: \"))thai_baht = us_dollars * 35thai_baht -= thai_baht * 0.05print(f\"You will receive {thai_baht} Thai Baht after the transaction.\")"
  },
  
  {
    "title": "Vector Integral Theorems Summary",
    "url": "/posts/MultiIntegrals/",
    "categories": "Mathematics, Calculus",
    "tags": "vector, integral, math, multivariable, calculus",
    "date": "2024-02-09 00:23:00 +0900",
    





    
    "snippet": "IntroductionIn this post, I will be introducing the extension of the fundamental theorem of calculus, and the summary of the useful theorems for integrals in vector field: Green’s Theorem, Divergen...",
    "content": "IntroductionIn this post, I will be introducing the extension of the fundamental theorem of calculus, and the summary of the useful theorems for integrals in vector field: Green’s Theorem, Divergence Theorem, and Stokes’ TheoremPrerequsites:  Undersatnding in multivariable integrals  Understanding in Vector Field  Understanding in gradient of multivarible functions  Understanding in Curl and Divergence of Vector FieldFundamental Theorem of Line IntegralsIf a vector field \\(\\vec{F}\\) is conservative, then the line integral through a curve \\(C\\) depends only on the endpoints of \\(C\\). Mathematically, this can be expressed as:\\[\\int_C \\vec{F} \\cdot d\\vec{r} = f(\\vec{r}(b)) - f(\\vec{r}(a))\\]where \\(f\\) is the potential function for \\(\\vec{F}\\).The theorem is particularly useful in physics when calculating work done by a force field in moving an object along a path.Green’s TheoremLet \\(C\\) be a positively oriented, piecewise smooth, simple, closed curve, and let \\(\\vec{F}\\) be a vector field where \\(\\vec{F}(x, y) = \\langle M(x, y), N(x, y) \\rangle\\). Let \\(D\\) be the region enclosed by the curve. If \\(M\\) and \\(N\\) have continuous first-order partial derivatives on \\(D\\), then Green’s Theorem states:\\[\\oint_C (M dx + N dy) = \\iint_D \\left(\\frac{\\partial N}{\\partial x} - \\frac{\\partial M}{\\partial y}\\right) dA = \\iint_D (\\nabla \\times \\vec{F}) \\cdot \\vec{k} \\, dA\\]where \\(M\\) and \\(N\\) are functions of \\(x\\) and \\(y\\) with continuous partial derivatives in \\(D\\). Green’s Theorem can be applied to determine the circulation and flux of a fluid across a region.Divergence TheoremLet \\(E\\) be a simple solid region and \\(S\\) be the boundary surface of \\(E\\) with positive orientation. Let \\(\\vec{F}\\) be a vector field whose components have continuous first-order partial derivatives. Then,\\[\\iint_{S} \\vec{F} \\cdot d\\vec{S} = \\iiint_{E} \\text{div} \\vec{F} \\, dV\\]This applies, for example, to calculating the net flow of fluid through a surface.Stokes’ TheoremLet \\(S\\) be an oriented smooth surface that is bounded by a simple, closed, smooth boundary curve \\(C\\) with positive orientation. Also let \\(\\vec{F}\\) be a vector field then,\\[\\oint_{C} \\vec{F} \\cdot d\\vec{r} = \\iint_{S} \\text{curl} \\vec{F} \\cdot d\\vec{S}\\]Stokes’ Theorem allows analysis of rotational effects in fluid flow or magnetic fields.ApplicationsIn this section, I will provide a detailed example of the situation where one of the theorems can be applied. Consider a situation of analyzing airflow in a room with an air conditioning system. By representing the airflow with a velocity field \\(\\vec{F}\\), the divergence \\(\\nabla \\cdot \\vec{F}\\) quantifies the net airflow rate out of a volume. Integrating this over the room’s volume \\(V\\) gives the total airflow rate, which, by the Divergence Theorem, equals the flux through the room’s boundary surface \\(S\\):\\[\\iiint_{V} (\\nabla \\cdot \\vec{F}) \\, dV = \\iint_{S} \\vec{F} \\cdot d\\vec{S}\\]The left side of the equation represents the total source strength within the room, while the right side represents the total airflow across the room’s boundary. This can help in designing efficient ventilation systems by ensuring the balance between the air introduced and the air exhausted, thus maintaining air quality and proper pressurization."
  },
  
  {
    "title": "Big O Notation",
    "url": "/posts/BigO/",
    "categories": "Programming, Algorithm",
    "tags": "algorithm, programming, math, c++",
    "date": "2024-02-09 00:23:00 +0900",
    





    
    "snippet": "In this post, we’ll explore the concept of Big O notation, common time complexities, and visualize how these complexities grow as the input size increases.IntroductionTime and Space ComplexityAlgor...",
    "content": "In this post, we’ll explore the concept of Big O notation, common time complexities, and visualize how these complexities grow as the input size increases.IntroductionTime and Space ComplexityAlgorithms are crucial part of any program, and good a programmer chooses the most efficient algorithm to solve a problem.To analyze the efficiency of an algorithm, there are two big considerations:      Time Complexity - a measure of the amount of time an algorithm takes to run, in relation to the size of the input data.        Sapce Complexity - a measure of the amount of computer memory (or space) an algorithm needs to run to completion.  Why do algorithms matter?ExampleConsider a simple problem: calculating the sum of all numbers up to an integer n.\\[\\sum_{i=1}^{n} i = \\frac{n(n + 1)}{2}\\]Solution 1: Efficient Algorithmdef sum(n):    return (n * (n+1)) / 2Solution 2: Inefficient Algorithmdef sum(n):    sum = 0    for i in range(1, n+1):        sum += i    return sumThe first solution does not take any memory space as there is no variable assignment involved in the solution.Also, regardless of how large the input n is, the code will just execute a simple mathematical expression.On the other hand, the second solution requires a memory space to save the variable sum, and it executes the addition inside the for loop n times.The difference between the performances of the two solutions might be subtle when n is small, yet as n becomes larger, the difference will grow and be noticeable.Choosing a good algorithm is a must to optimize the performance and efficiency of a program.In the real world, poor efficiency will result in taking up more resources, and thus, more cost.Big O Notation enables programmers to analyze the complexity and the efficiency of an algorithm.DefinitionBig O notation is a mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. In computer science, it is used to analyze the efficiency of algorithms and estimate their worst-case time complexity.Formal DefinitionLet $f(n)$ and $g(n)$ be functions mapping positive integers to positive real numbers. We say that $f(n)$ is $O(g(n))$, read as “f of n is big O of g of n”, if and only if there exist positive constants $c$ and $n_0$ such that:for all $n \\geq n_0$, \\(f(n) \\leq c \\cdot g(n)\\)This means that $f(n) = O(g(n))$ indicates that the growth rate of $f(n)$ is bounded above by the growth rate of $g(n)$ up to a constant factor, for sufficiently large $n$. This notation is used to classify algorithms according to their running time or space requirements in the worst-case scenario.Common Time ComplexitiesCommon Time Complexities include the following:  Constant time  Linear time  Logarithmic time  Linearithmic time  Quadratic time  Exponential time$O({1})$ - Constant Time$O({1})$ represents algorithms that always execute in the same time (or space) regardless of the size of the input data.Example: Accessing a specific element in an array.#include &lt;iostream&gt;int main(){    int myArray[] = {1, 2, 3, 4, 5};    std::cout &lt;&lt; myArray[0]; // returns the first element regardless of the size of the array    return 0;}$O(n)$ - Linear Time$O(n)$ represents algorithms whose performance grows linearly and in direct proportion to the size of the input data set.Example: Traversing an array.#include&lt;iostream&gt;int main(){    int myArray[] = {1, 2, 3, 4, 5};    for(int i = 0; i &lt; 5; i++) {        std::cout &lt;&lt; myArray[i]; // prints each element in the array    }    return 0;}$O(\\log n)$ - Logarithmic TimeLogarithmic time complexity $O(\\log n)$ describes an algorithm that reduces the size of its input data by a significant fraction (usually half) with each step, leading to fewer steps as the input size grows.Example: Binary search in a sorted array.#include &lt;bits/stdc++.h&gt;using namespace std;int binarySearch(int arr[], int l, int r, int x){    while (l &lt;= r) {        int m = l + (r - l) / 2;        if (arr[m] == x)            return m;        if (arr[m] &lt; x)            l = m + 1;        else            r = m - 1;    }    return -1;}int main(void){    int arr[] = { 2, 3, 4, 10, 40 };    int x = 10;    int n = sizeof(arr) / sizeof(arr[0]);    int result = binarySearch(arr, 0, n - 1, x);    (result == -1)        ? cout &lt;&lt; \"Element is not present in array\"        : cout &lt;&lt; \"Element is present at index \" &lt;&lt; result;    return 0;}$O(n\\log n)$ - Linearithmic TimeLinearithmic time complexity $O(n\\log n)$ represents algorithms where the time grows in proportion to $n \\log n$, combining linear and logarithmic behavior. This complexity is common in efficient sorting algorithms.Example: Merge Sort algorithm.#include &lt;bits/stdc++.h&gt;using namespace std;void merge(int array[], int const left, int const mid,\t\tint const right){\tint const subArrayOne = mid - left + 1;\tint const subArrayTwo = right - mid;\tauto *leftArray = new int[subArrayOne],\t\t*rightArray = new int[subArrayTwo];\tfor (auto i = 0; i &lt; subArrayOne; i++)\t\tleftArray[i] = array[left + i];\tfor (auto j = 0; j &lt; subArrayTwo; j++)\t\trightArray[j] = array[mid + 1 + j];\tauto indexOfSubArrayOne = 0, indexOfSubArrayTwo = 0;\tint indexOfMergedArray = left;\twhile (indexOfSubArrayOne &lt; subArrayOne\t\t&amp;&amp; indexOfSubArrayTwo &lt; subArrayTwo) {\t\tif (leftArray[indexOfSubArrayOne]\t\t\t&lt;= rightArray[indexOfSubArrayTwo]) {\t\t\tarray[indexOfMergedArray]\t\t\t\t= leftArray[indexOfSubArrayOne];\t\t\tindexOfSubArrayOne++;\t\t}\t\telse {\t\t\tarray[indexOfMergedArray]\t\t\t\t= rightArray[indexOfSubArrayTwo];\t\t\tindexOfSubArrayTwo++;\t\t}\t\tindexOfMergedArray++;\t}\twhile (indexOfSubArrayOne &lt; subArrayOne) {\t\tarray[indexOfMergedArray]\t\t\t= leftArray[indexOfSubArrayOne];\t\tindexOfSubArrayOne++;\t\tindexOfMergedArray++;\t}\twhile (indexOfSubArrayTwo &lt; subArrayTwo) {\t\tarray[indexOfMergedArray]\t\t\t= rightArray[indexOfSubArrayTwo];\t\tindexOfSubArrayTwo++;\t\tindexOfMergedArray++;\t}\tdelete[] leftArray;\tdelete[] rightArray;}void mergeSort(int array[], int const begin, int const end){\tif (begin &gt;= end)\t\treturn;\tint mid = begin + (end - begin) / 2;\tmergeSort(array, begin, mid);\tmergeSort(array, mid + 1, end);\tmerge(array, begin, mid, end);}void printArray(int A[], int size){\tfor (int i = 0; i &lt; size; i++)\t\tcout &lt;&lt; A[i] &lt;&lt; \" \";\tcout &lt;&lt; endl;}int main(){\tint arr[] = { 12, 11, 13, 5, 6, 7 };\tint arr_size = sizeof(arr) / sizeof(arr[0]);\tcout &lt;&lt; \"Given array is \\n\";\tprintArray(arr, arr_size);\tmergeSort(arr, 0, arr_size - 1);\tcout &lt;&lt; \"\\nSorted array is \\n\";\tprintArray(arr, arr_size);\treturn 0;}$O(n^2)$ - Quadratic TimeQuadratic time complexity $O(n^2)$ indicates that the time taken by an algorithm is proportional to the square of the input size. It is common in algorithms that perform nested iterations over the data set.Example: Bubble sort algorithm.#include &lt;bits/stdc++.h&gt;using namespace std;void bubbleSort(int arr[], int n){\tint i, j;\tbool swapped;\tfor (i = 0; i &lt; n - 1; i++) {\t\tswapped = false;\t\tfor (j = 0; j &lt; n - i - 1; j++) {\t\t\tif (arr[j] &gt; arr[j + 1]) {\t\t\t\tswap(arr[j], arr[j + 1]);\t\t\t\tswapped = true;\t\t\t}\t\t}\t\tif (swapped == false)\t\t\tbreak;\t}}void printArray(int arr[], int size){\tint i;\tfor (i = 0; i &lt; size; i++)\t\tcout &lt;&lt; \" \" &lt;&lt; arr[i];}int main(){\tint arr[] = { 64, 34, 25, 12, 22, 11, 90 };\tint N = sizeof(arr) / sizeof(arr[0]);\tbubbleSort(arr, N);\tcout &lt;&lt; \"Sorted array: \\n\";\tprintArray(arr, N);\treturn 0;}$O(2^n)$ - Exponential TimeExponential time complexity $O(2^n)$ describes an algorithm whose growth doubles with each addition to the input data set. This complexity is typical in brute-force algorithms for solving complex problems.Example: Fibonacci sequence using recursion.#include &lt;iostream&gt;int fibonacci(int n) {    if (n &lt;= 1)        return n;    return fibonacci(n - 1) + fibonacci(n - 2);}int main() {    int n = 10;    std::cout &lt;&lt; \"Fibonacci number is \" &lt;&lt; fibonacci(n);    return 0;}* The detailed observation into the algorithms introduced in this part will be posted laterVisualization of the Time Complexitiesimport matplotlib.pyplot as pltimport numpy as npn = np.arange(1, 100)plt.figure(figsize=(10, 6))# O(1)plt.plot(n, np.ones_like(n), label='$O(1)$', linestyle='--')# O(n)plt.plot(n, n, label='$O(n)$')# O(log n)plt.plot(n, np.log(n), label='$O(\\log n)$')# O(n log n)plt.plot(n, n*np.log(n), label='$O(n \\log n)$')# O(n^2)plt.plot(n, n**2, label='$O(n^2)$')# O(2^n)plt.plot(n, 2**n, label='$O(2^n)$')plt.title('Common Time Complexities')plt.xlabel('Input Size (n)')plt.ylabel('Operations')plt.grid(True)plt.legend()plt.yscale('log')plt.ylim(0, 10000)plt.show()ConclusionAnalyzing the efficiency of an algorithm is a necessary process for making informed decisions when designing a program. Big O notation is a useful strategy for investigating the time and space complexity of an algorithm, and thus, understanding Big O notation is crucial for developers and programmers to optimize the performance of their programs.References      Modeling Social Data. (2017, February 3). Lecture 3: Computational Complexity. Retrieved February 9, 2024, from https://modelingsocialdata.org/lectures/2017/02/03/lecture-3-computational-complexity.html        GeeksforGeeks. (n.d.). Binary Search. Retrieved February 9, 2024, from https://www.geeksforgeeks.org/binary-search/        GeeksforGeeks. (n.d.). Merge Sort. Retrieved February 9, 2024, from https://www.geeksforgeeks.org/merge-sort/        GeeksforGeeks. (n.d.). Bubble Sort. Retrieved February 9, 2024, from https://www.geeksforgeeks.org/bubble-sort/  "
  },
  
  {
    "title": "Python Tutorial - Chapter 0",
    "url": "/posts/Chapter0/",
    "categories": "Python Tutorials",
    "tags": "python",
    "date": "2024-02-08 13:23:00 +0900",
    





    
    "snippet": "Welcome to Python Tutorial!There are many Human Languages, such as English, Korean, Spanish, Chinese, etc.Just Like humans, computers also have different languages for communication, such as C/C++,...",
    "content": "Welcome to Python Tutorial!There are many Human Languages, such as English, Korean, Spanish, Chinese, etc.Just Like humans, computers also have different languages for communication, such as C/C++, Assembly, Java, JavaScript, and Python.Why Python?Interpreter V.S. CompilerComputers fundamentally only understand languages written with 0 and 1, often referred to as “Machine Language”. No matter what language programmers code in, there must be a process of converting that into machine language. This conversion is done by either an interpreter or a compiler.Two popular examples of these types of languages are C (a compiled language) and Python (an interpreted language). Compiled languages like C usually perform faster, but they can be more difficult to code and debug.Python, on the other hand, is an interpreted language. This means that it is relatively easy to write and fix errors in Python. The interpreter executes the code line by line, which allows for more immediate feedback and easier debugging. This is one of the reasons why Python is popular for beginners and for rapid development.Easy to LearnPython is easy to learn for several reasons.      Readability: Python’s syntax is designed to be readable and straightforward. This makes it easier for beginners to pick up the language and understand what the code is doing.        High-level language: Python is a high-level language, meaning it abstracts many of the complex details of the computer. This allows beginners to start coding without needing to understand complex computer science concepts.        Large Standard Library: Python comes with a large standard library that covers many areas, from web development to machine learning. This means beginners can do a lot with Python without needing to understand or use external libraries.        Strong Community: Python is an open source and has a large and supportive community. This means there are plenty of resources available for learning and troubleshooting, from online tutorials to forums and Q&amp;A websites.  For example, these are the codes for printing “Hello World!” in three different languages.C++#include &lt;iostream&gt;using namespace std;int main() {    cout &lt;&lt; \"Hello World!\";    return 0;}Javapublic class HelloWorld {    public static void main(String[] args) {        System.out.println(\"Hello World!\");    }}Pythonprint(\"Hello World!\")Wide UsecasesPython has gained its popularity because of its wide range of domains.Python is useful for these tasks:  Web development  Data Science / Data Analysis  Machine Learning  Artificial IntelligencePopular programs developed with Python:  YouTube  Google  Instagram  Spotify  AmazonInstallationWe will be using Jupyter Notebook for this tutorial.What is a Jupyter Notebook?Jupyter Notebook is an interactive web application for creating and sharing computational documents.It is useful to write and run Python codes on a web environment without sophisticated setup process.Install AnacondaTo setup the device, please visit the website andInstall Anaconda.Anaconda is a useful tool that automatically install all the softwares required for writing Python code in Jupyter Notebook.Launch Jupyter NotebookAfter the installation is completed, open the Anaconda panel and find Jupyter Notebook to launch the program.Choose DirectoryGo to the directory where you want to store the tutorial materials.Click new button on the top right corner, and choose Python 3 kernal.Writing the first codeNow, let’s write our first Python code.In the first code cell, type the following codeprint(\"Hello, Python!\")and press shift + enter to run the code.Hello, Python!If you see the text printed, the software is successfully installed.“The only way to learn a new programming language is by writing programs in it.”- Dennis Ritchie"
  },
  
  {
    "title": "Recursion",
    "url": "/posts/Recursion/",
    "categories": "Programming, Algorithm",
    "tags": "algorithm, programming, python",
    "date": "2024-02-08 00:23:00 +0900",
    





    
    "snippet": "Recursion in algorithms is a method where a problem is solved by breaking it down into smaller instances of the same problem. This approach involves a function calling itself with a smaller input u...",
    "content": "Recursion in algorithms is a method where a problem is solved by breaking it down into smaller instances of the same problem. This approach involves a function calling itself with a smaller input until it reaches a condition known as the base case, which is simple enough to be solved directly. Once the base case is reached, the solution to that base case is used to solve the other instances of the problem, building up to the solution of the original problem.  The base case is the condition to stop the recursion  The recursive case is the part where the function calls on itself.print 1 to 10 using recursive functionwithout recursion, the code would look like this:for i in range(11):    print(i)012345678910same task done with recursion:def printNum(n = 1):    if n &gt; 10: #This is a base case        return    else: # This is a recursive case        print(n)        printNum(n + 1)printNum()12345678910Factorialfactorial is a function that multiplies a number by every number below it till 1without recursion:n = 6num = 1for i in range(n):    num *= n    n -= 1print(num)720with recursion:def Factorial(n):    num = 1    if n &lt; 0: # This is a Boundary Case        raise ValueError(\"The input must be a non-negative integer\")    elif n &lt;= 1: # This is a base case        return 1    else: # This is a recursive case        return n * Factorial(n - 1)print(Factorial(6))720FibonacciFibonacci sequence is a sequence in which each number is the sum of the two preceding ones.without recursion:n = 6a_1 = 0a_2 = 1for i in range(n - 1):    a_1, a_2 = a_2, a_1 + a_2print(a_2)8def Fibonacci(n):    if n == 0: # This is a base case        return 0    elif n == 1: # This is another base case        return 1    elif n &gt; 1: # This is a recursive case        return Fibonacci(n - 1) + Fibonacci(n - 2)    else: # This is a boundary case        raise ValueError(\"Negative integer is invalid\")print(Fibonacci(6))“To understand recursion, one must first understand recursion.”-Stephen Hawking-"
  }
  
]

